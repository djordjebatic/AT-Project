{"version":3,"sources":["Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","messageTypes","classes","classesSocket","WebSocket","getHostAddress","runningAgents","localRunningAgents","runningAgentsSocket","logs","loggerSocket","createInstanceClass","createInstanceName","selectedMessageType","sender","senderRequired","reciever","message","messageRequired","onmessage","evt","setState","JSON","parse","data","list","length","filter","runningAgent","aid","host","address","window","location","prevState","concat","toConsumableArray","handleCreateInstanceClassChange","bind","assertThisInitialized","handleCreateInstanceNameChange","handleSelectedMessageTypeChange","handleSendMessage","handleSenderChange","handleSenderRequiredChange","handleRecieverChange","handleMessageRequiredChange","handleMessageChange","handleCreate","handleDelete","clearLogs","loadMessageTypes","loadClasses","loadRunningAgents","href","replace","_this2","url","axios","get","then","res","_this3","_this4","event","preventDefault","post","agentClass","agentName","delete","Number","performative","conversationID","uuidv4","receivers","content","target","value","checked","targsenet","_this5","react_default","a","createElement","style","width","marginLeft","marginRight","onSubmit","onChange","map","item","placeholder","type","disabled","trim","borderSpacing","name","onClick","index","paddingLeft","paddingRight","paddingTop","paddingBottom","height","marginTop","overflowY","border","borderWidth","Component","Boolean","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.099f609d.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport axios from 'axios';\nimport AgentWrapper from '../Models/AgentWrapper';\nimport AID from '../Models/AID';\nimport uuidv4 from 'uuid/v4';\n\ninterface IAgentState{\n  messageTypes: string[];\n  classes: string[];\n  classesSocket: WebSocket;\n  runningAgents: AgentWrapper[];\n  localRunningAgents: AgentWrapper[];\n  runningAgentsSocket: WebSocket;\n  logs: string [];\n  loggerSocket: WebSocket;\n  createInstanceClass: string;\n  createInstanceName: string;\n  selectedMessageType: string;\n  sender: string;\n  reciever: string;\n  message: string;\n  senderRequired: boolean;\n  messageRequired: boolean;\n}\n\ninterface IMessageData{\n  performative: string,\n  conversationID: string,\n  receivers: AID[],\n  sender?: AID,\n  content?: string\n}\n\n class App extends Component<any, IAgentState>{\n\n  constructor(props: any){\n    super(props);\n    this.state = {\n      messageTypes : [],\n      classes : [],\n      classesSocket: new WebSocket('ws://'+this.getHostAddress()+'refreshAgentClasses'),\n      runningAgents : [],\n      localRunningAgents : [],\n      runningAgentsSocket : new WebSocket('ws://'+this.getHostAddress()+'refreshRunningAgents'),\n      logs : [],\n      loggerSocket : new WebSocket('ws://'+this.getHostAddress()+'logger'),\n      createInstanceClass : '',\n      createInstanceName : '',\n      selectedMessageType: '',\n      sender: '',\n      senderRequired: false,\n      reciever: '',\n      message: '',\n      messageRequired: false\n    }\n\n    this.state.classesSocket.onmessage = evt => {\n      this.setState({\n      \tclasses : JSON.parse(evt.data).list\n      })\n\n      if(this.state.classes.length > 0 ){\n        this.setState({\n          createInstanceClass : this.state.classes[0]\n        });\n      }\n    }\n\n    this.state.runningAgentsSocket.onmessage = evt => {\n      this.setState({\n      \trunningAgents : JSON.parse(evt.data).list\n      })\n\n      this.setState(\n      {\n        localRunningAgents: (this.state.runningAgents.filter((runningAgent) =>\n          runningAgent.aid.host.address === window.location.host))\n        })\n\n        if(this.state.runningAgents.length > 0){\n          this.setState({\n            reciever : '0'\n          })\n        }\n        else{\n          this.setState({\n            reciever : '',\n          })\n        }\n\n      if(this.state.localRunningAgents.length > 0){\n        this.setState({\n          sender : '0'\n        })\n      }\n      else{\n        this.setState({\n          sender : ''\n        })\n      }\n    }\n\n    this.state.loggerSocket.onmessage = evt => {\n      this.setState(prevState => ({\n        logs: [...prevState.logs, evt.data]\n      }))\n    }\n\n    this.handleCreateInstanceClassChange = this.handleCreateInstanceClassChange.bind(this);\n    this.handleCreateInstanceNameChange = this.handleCreateInstanceNameChange.bind(this);\n    this.handleSelectedMessageTypeChange = this.handleSelectedMessageTypeChange.bind(this);\n    this.handleSendMessage = this.handleSendMessage.bind(this);\n    this.handleSenderChange = this.handleSenderChange.bind(this);\n    this.handleSenderRequiredChange = this.handleSenderRequiredChange.bind(this);\n    this.handleRecieverChange = this.handleRecieverChange.bind(this);\n    this.handleMessageRequiredChange = this.handleMessageRequiredChange.bind(this);\n    this.handleMessageChange = this.handleMessageChange.bind(this);\n    this.handleCreate = this.handleCreate.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.clearLogs = this.clearLogs.bind(this);\n  }\n\n\n  public componentDidMount(){\n    this.loadMessageTypes();\n    this.loadClasses();\n    this.loadRunningAgents();\n  }\n\n  private getHostAddress(){\n    var url : string = window.location.href;\n    return url.replace(/(^\\w+:|^)\\/\\//, '');\n  }\n\n  private loadMessageTypes(){\n    let url = window.location.href+'rest/messages';\n\n        axios.get(url)\n            .then(res => {\n                this.setState({\n                  messageTypes: res.data});\n\n                  if(this.state.messageTypes.length > 0 ){\n                    this.setState({\n                      selectedMessageType : this.state.messageTypes[0]\n                    });\n                  }\n    })\n  }\n\n  private loadClasses(){\n    let url = window.location.href+'rest/agents/classes/';\n\n        axios.get(url)\n            .then(res => {\n                this.setState({\n                  classes: res.data.list});\n\n                  if(this.state.classes.length > 0 ){\n                    this.setState({\n                      createInstanceClass : this.state.classes[0]\n                    });\n                  }\n    })\n  }\n\n  private loadRunningAgents(){\n    let url = window.location.href+'rest/agents/running/';\n\n        axios.get(url)\n            .then(res => {\n                this.setState({\n                  runningAgents: res.data.list\n        });\n        this.setState(\n          {\n            localRunningAgents: (this.state.runningAgents.filter((runningAgent) =>\n              runningAgent.aid.host.address === window.location.host))\n            })\n    \n            if(this.state.runningAgents.length > 0){\n              this.setState({\n                reciever : '0'\n              })\n            }\n            else{\n              this.setState({\n                reciever : '',\n              })\n            }\n    \n          if(this.state.localRunningAgents.length > 0){\n            this.setState({\n              sender : '0'\n            })\n          }\n          else{\n            this.setState({\n              sender : ''\n            })\n          }\n    })\n  }\n\n  private handleCreate(event:any){\n    event.preventDefault();\n    let url = window.location.href+'rest/agents/running/'+this.state.createInstanceClass+'/'+this.state.createInstanceName;\n    axios.post(url);\n  }\n\n  private handleDelete(agentClass: string, agentName: string){\n    let url = window.location.href+'rest/agents/running/'+agentClass+'/'+agentName;\n    axios.delete(url);\n  }\n\n  private handleSendMessage(event:any){\n    event.preventDefault();\n    let url = window.location.href+'rest/messages';\n\n    let sender = this.state.localRunningAgents[Number(this.state.sender)];\n    let reciever = this.state.runningAgents[Number(this.state.reciever)];\n    var data : IMessageData;\n    data = {\n      performative: this.state.selectedMessageType,\n      conversationID: uuidv4(),\n      receivers:[ reciever.aid]\n    }\n\n    if(this.state.senderRequired){\n      data.sender = sender.aid\n    }\n\n    if(this.state.messageRequired){\n      data.content = this.state.message\n    }\n\n    axios.post(url, data);\n  }\n  \n  private handleCreateInstanceClassChange(event: any) {\n    this.setState({\n        createInstanceClass: event.target.value\n    })\n  }\n\n  private handleCreateInstanceNameChange(event: any) {\n    this.setState({\n        createInstanceName: event.target.value\n    })\n  }\n\n  private handleSelectedMessageTypeChange(event: any) {\n    this.setState({\n        selectedMessageType: event.target.value\n    })\n  }\n\n  private handleSenderRequiredChange(event: any) {\n    this.setState({\n        senderRequired: event.target.checked\n    })\n  }\n\n  private handleSenderChange(event: any) {\n    this.setState({\n        sender: event.targsenet.value\n    })\n  }\n\n  private handleRecieverChange(event: any) {\n    this.setState({\n        reciever: event.target.value\n    })\n  }\n\n  private handleMessageRequiredChange(event: any) {\n    this.setState({\n        messageRequired: event.target.checked\n    })\n  }\n\n  private handleMessageChange(event: any) {\n    this.setState({\n        message: event.target.value\n    })\n  }\n\n  private clearLogs(event: any) {\n    this.setState({\n        logs: []\n    })\n  }\n\n   public render(){\n     return (\n      <div style={{ width: \"50em\", marginLeft:\"auto\", marginRight:\"auto\"}}>       \n      <h1>Classes</h1>\n      <div style={{marginLeft:\"3em\"}}>\n      <form onSubmit={this.handleCreate}>\n        <select value={this.state.createInstanceClass} onChange={this.handleCreateInstanceClassChange}>\n        {this.state.classes.map((item) => (\n          <option>{item}</option>\n      ))}\n        </select>\n        &emsp;\n        <input placeholder=\"Enter instance name...\" value={this.state.createInstanceName} onChange={this.handleCreateInstanceNameChange}></input>\n        &emsp;\n        <input type=\"submit\" value=\"Submit\" disabled={this.state.createInstanceClass.trim() ===\"\" || this.state.createInstanceName.trim() ===\"\"}></input>\n      </form> \n      </div>     \n      <br/>\n      <h1>Running Agents</h1>\n      <table style={{marginLeft:\"3em\", borderSpacing: \"0.5em\"}}>\n        <tbody>\n          {this.state.runningAgents.map(item =>(\n            <tr>\n              <td>{item.aid.name}</td>\n              <td><button onClick={() => this.handleDelete(item.aid.type.name, item.aid.name)}>Delete</button></td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <br/>\n      <h1>Messages</h1>\n      <form onSubmit={this.handleSendMessage}>\n      <table style={{marginLeft:\"3em\", borderSpacing: \"0.5em\"}}>\n      <tbody>\n        <tr>\n      <td>Sender: </td>\n      <td><input type=\"checkbox\" checked={this.state.senderRequired} onChange={this.handleSenderRequiredChange}></input>\n      <select value={this.state.sender} onChange={this.handleSenderChange} disabled={!this.state.senderRequired}>\n        {this.state.localRunningAgents.map((item,index) => (\n          <option value ={index}>{item.aid.name}</option>\n      ))}\n        </select>\n        </td>\n        </tr>\n        <tr>\n        <td>Reciever: </td>\n        <td> &emsp; <select value={this.state.reciever} onChange={this.handleRecieverChange}>\n        {this.state.runningAgents.map((item,index) => (\n          <option value ={index}>{item.aid.name}</option>\n      ))}\n        </select>\n        </td>\n        </tr>\n        <tr>\n        <td>Message type: </td>\n        <td> &emsp; <select value={this.state.selectedMessageType} onChange={this.handleSelectedMessageTypeChange}>\n        {this.state.messageTypes.map(item => (\n          <option>{item}</option>\n      ))}\n        </select>\n        </td>\n        </tr>\n        <tr>\n        <td>Message: </td>        \n        <td>\n        <input type=\"checkbox\" checked={this.state.messageRequired} onChange={this.handleMessageRequiredChange}></input> \n        <input placeholder=\"Enter message...\" value={this.state.message} onChange={this.handleMessageChange} disabled={!this.state.messageRequired}></input>\n        </td>\n        </tr>\n        <tr>\n        <input type=\"submit\" value=\"Submit\" disabled={(this.state.sender.trim()===\"\" && this.state.senderRequired === true) || this.state.reciever.trim()===\"\" || (this.state.message.trim() ===\"\" && this.state.messageRequired === true) || this.state.selectedMessageType.trim() ===\"\"}></input>\n        </tr>\n      </tbody>\n      </table>\n      </form>\n      <br/>\n      <h1>Logs</h1>\n      <div style={{ marginLeft:\"3em\"}}>\n        <button onClick={this.clearLogs}>Clear</button>\n        <div style={{ paddingLeft: \"1em\", paddingRight:\"1em\", paddingTop:\"1em\", paddingBottom:\"1em\", height: \"6.5em\", marginTop:\"1em\", overflowY:\"scroll\", border: \"solid\", borderWidth:\"0.01em\"}}>\n        {this.state.logs.map(item =>(\n          <p>{item}</p>\n        ))}\n        </div>\n      </div>\n      <br/>\n      </div>\n     )\n   }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}